/**
 * Name of each mouse button.
 */
export const MouseButtonCodes = ["Left", "Middle", "Right", "Back", "Forward"];

/**
 * Name of each keyboard key.
 *
 * This also corresponds to the string value of `KeyboardEvent.code`
 */
export const KeyboardCodes = [
    "Backspace",
    "Tab",
    "Enter",
    "ShiftLeft",
    "ShiftRight",
    "ControlLeft",
    "ControlRight",
    "AltLeft",
    "AltRight",
    "Pause",
    "CapsLock",
    "Escape",
    "Space",
    "PageUp",
    "PageDown",
    "End",
    "Home",
    "ArrowLeft",
    "ArrowUp",
    "ArrowRight",
    "ArrowDown",
    "PrintScreen",
    "Insert",
    "Delete",
    "Digit0",
    "Digit1",
    "Digit2",
    "Digit3",
    "Digit4",
    "Digit5",
    "Digit6",
    "Digit7",
    "Digit8",
    "Digit9",
    "KeyA",
    "KeyB",
    "KeyC",
    "KeyD",
    "KeyE",
    "KeyF",
    "KeyG",
    "KeyH",
    "KeyI",
    "KeyJ",
    "KeyK",
    "KeyL",
    "KeyM",
    "KeyN",
    "KeyO",
    "KeyP",
    "KeyQ",
    "KeyR",
    "KeyS",
    "KeyT",
    "KeyU",
    "KeyV",
    "KeyW",
    "KeyX",
    "KeyY",
    "KeyZ",
    "MetaLeft",
    "MetaRight",
    "ContextMenu",
    "Numpad0",
    "Numpad1",
    "Numpad2",
    "Numpad3",
    "Numpad4",
    "Numpad5",
    "Numpad6",
    "Numpad7",
    "Numpad8",
    "Numpad9",
    "NumpadMultiply",
    "NumpadAdd",
    "NumpadSubtract",
    "NumpadDecimal",
    "NumpadDivide",
    "F1",
    "F2",
    "F3",
    "F4",
    "F5",
    "F6",
    "F7",
    "F8",
    "F9",
    "F10",
    "F11",
    "F12",
    "NumLock",
    "ScrollLock",
    "Semicolon",
    "Equal",
    "Comma",
    "Minus",
    "Period",
    "Slash",
    "Backquote",
    "BracketLeft",
    "Backslash",
    "IntlBackslash",
    "BracketRight",
    "Quote",
];

/**
 * Keyboard and mouse button.
 *
 * This is a union of all possible keys and mouse buttons.
 */
export const enum Key {
    Backspace,
    Tab,
    Enter,
    ShiftLeft,
    ShiftRight,
    ControlLeft,
    ControlRight,
    AltLeft,
    AltRight,
    Pause,
    CapsLock,
    Escape,
    Space,
    PageUp,
    PageDown,
    End,
    Home,
    ArrowLeft,
    ArrowUp,
    ArrowRight,
    ArrowDown,
    PrintScreen,
    Insert,
    Delete,
    Digit0,
    Digit1,
    Digit2,
    Digit3,
    Digit4,
    Digit5,
    Digit6,
    Digit7,
    Digit8,
    Digit9,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    MetaLeft,
    MetaRight,
    ContextMenu,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadMultiply,
    NumpadAdd,
    NumpadSubtract,
    NumpadDecimal,
    NumpadDivide,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    NumLock,
    ScrollLock,
    Semicolon,
    Equal,
    Comma,
    Minus,
    Period,
    Slash,
    Backquote,
    BracketLeft,
    Backslash,
    IntlBackslash,
    BracketRight,
    Quote,

    // Mouse buttons
    MouseLeft,
    MouseMiddle,
    MouseRight,
    MouseBack,
    MouseForward,
}

/**
 * Map of `KeyboardEvent.code` to `Key`.
 */
export const KeyboardCodeMap = new Map<string, Key>([
    ["Backspace", Key.Backspace],
    ["Tab", Key.Tab],
    ["Enter", Key.Enter],
    ["ShiftLeft", Key.ShiftLeft],
    ["ShiftRight", Key.ShiftRight],
    ["ControlLeft", Key.ControlLeft],
    ["ControlRight", Key.ControlRight],
    ["AltLeft", Key.AltLeft],
    ["AltRight", Key.AltRight],
    ["Pause", Key.Pause],
    ["CapsLock", Key.CapsLock],
    ["Escape", Key.Escape],
    ["Space", Key.Space],
    ["PageUp", Key.PageUp],
    ["PageDown", Key.PageDown],
    ["End", Key.End],
    ["Home", Key.Home],
    ["ArrowLeft", Key.ArrowLeft],
    ["ArrowUp", Key.ArrowUp],
    ["ArrowRight", Key.ArrowRight],
    ["ArrowDown", Key.ArrowDown],
    ["PrintScreen", Key.PrintScreen],
    ["Insert", Key.Insert],
    ["Delete", Key.Delete],
    ["Digit0", Key.Digit0],
    ["Digit1", Key.Digit1],
    ["Digit2", Key.Digit2],
    ["Digit3", Key.Digit3],
    ["Digit4", Key.Digit4],
    ["Digit5", Key.Digit5],
    ["Digit6", Key.Digit6],
    ["Digit7", Key.Digit7],
    ["Digit8", Key.Digit8],
    ["Digit9", Key.Digit9],
    ["KeyA", Key.A],
    ["KeyB", Key.B],
    ["KeyC", Key.C],
    ["KeyD", Key.D],
    ["KeyE", Key.E],
    ["KeyF", Key.F],
    ["KeyG", Key.G],
    ["KeyH", Key.H],
    ["KeyI", Key.I],
    ["KeyJ", Key.J],
    ["KeyK", Key.K],
    ["KeyL", Key.L],
    ["KeyM", Key.M],
    ["KeyN", Key.N],
    ["KeyO", Key.O],
    ["KeyP", Key.P],
    ["KeyQ", Key.Q],
    ["KeyR", Key.R],
    ["KeyS", Key.S],
    ["KeyT", Key.T],
    ["KeyU", Key.U],
    ["KeyV", Key.V],
    ["KeyW", Key.W],
    ["KeyX", Key.X],
    ["KeyY", Key.Y],
    ["KeyZ", Key.Z],
    ["MetaLeft", Key.MetaLeft],
    ["MetaRight", Key.MetaRight],
    ["ContextMenu", Key.ContextMenu],
    ["Numpad0", Key.Numpad0],
    ["Numpad1", Key.Numpad1],
    ["Numpad2", Key.Numpad2],
    ["Numpad3", Key.Numpad3],
    ["Numpad4", Key.Numpad4],
    ["Numpad5", Key.Numpad5],
    ["Numpad6", Key.Numpad6],
    ["Numpad7", Key.Numpad7],
    ["Numpad8", Key.Numpad8],
    ["Numpad9", Key.Numpad9],
    ["NumpadMultiply", Key.NumpadMultiply],
    ["NumpadAdd", Key.NumpadAdd],
    ["NumpadSubtract", Key.NumpadSubtract],
    ["NumpadDecimal", Key.NumpadDecimal],
    ["NumpadDivide", Key.NumpadDivide],
    ["F1", Key.F1],
    ["F2", Key.F2],
    ["F3", Key.F3],
    ["F4", Key.F4],
    ["F5", Key.F5],
    ["F6", Key.F6],
    ["F7", Key.F7],
    ["F8", Key.F8],
    ["F9", Key.F9],
    ["F10", Key.F10],
    ["F11", Key.F11],
    ["F12", Key.F12],
    ["NumLock", Key.NumLock],
    ["ScrollLock", Key.ScrollLock],
    ["Semicolon", Key.Semicolon],
    ["Equal", Key.Equal],
    ["Comma", Key.Comma],
    ["Minus", Key.Minus],
    ["Period", Key.Period],
    ["Slash", Key.Slash],
    ["Backquote", Key.Backquote],
    ["BracketLeft", Key.BracketLeft],
    ["Backslash", Key.Backslash],
    ["IntlBackslash", Key.IntlBackslash],
    ["BracketRight", Key.BracketRight],
    ["Quote", Key.Quote],
]);

/**
 * @param held
 * true when the key is currently held down
 *
 * @param pressed
 * true only when the key was pressed this frame
 *
 * @param released
 * true only when the key was released this frame
 **/
export type InternalKeyState = {
    held: boolean;
    pressed: boolean;
    released: boolean;
};

export enum KeyState {
    /**
     * The key was pressed since the last frame.
     */
    Pressed,
    /**
     * The key has been held down for more than one frame.
     */
    Held,
    /**
     * The key was released since the last frame.
     */
    Released,
    /**
     * The key is not interacted with.
     */
    Idle,
}
